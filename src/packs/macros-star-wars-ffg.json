[
  {
    "_id": "damage-calculator-macro",
    "name": "Damage Calculator",
    "type": "script",
    "scope": "global",
    "author": "HYolFCF4LGB8KqnT",
    "img": "icons/svg/dice-target.svg",
    "command": "const getSelectedToken = () => {\n  const selectedTokens = canvas.tokens.controlled\n\n  if (selectedTokens.length > 1) {\n    console.warn('More than one token selected, the first one selected will be used. If you get unexpected results please only select one token.')\n  }\n\n  return selectedTokens[0]\n}\n\nconst getAttacker = () => {\n  const selectedToken = getSelectedToken()\n\n  // If user selected a token, use that token's data\n  if (selectedToken) {\n    return { token: selectedToken, actor: selectedToken.actor }\n  }\n\n  // If no token is selected, try and fallback to the user's character\n  if (!game.user.character) {\n    return { actor: null, token: null }\n  }\n\n  const actor = game.user.character\n\n  const tokens = actor.getActiveTokens()\n\n  if (tokens.length > 1) {\n    console.warn('More than one active token found for character, the first one will be used. If you get unexpected results please select a specific token instead.')\n  }\n\n  return { actor, token: tokens[0] }\n}\n\nconst getLastAttackFromChat = (actor) => {\n  const attackKeywords = ['RangedHeavy', 'RangedLight', 'Melee', 'Lightsaber', 'Gunnery', 'Brawl']\n\n  const chatMessages = game.messages.contents.reverse()\n\n  const lastAttackMessage = chatMessages.find(\n    (message) =>\n      attackKeywords.some((keyword) => message.flavor.replace(/[:\\s]/g, '').includes(keyword)) && message.rolls.length && message.rolls[0].data.type === 'weapon' && message.speaker.actor === actor.id\n  )\n\n  return lastAttackMessage\n}\n\nconst getActorStats = (actor) => ({\n  soak: actor.system.stats.soak.value,\n  wounds: actor.system.stats.wounds.value,\n  maxWounds: actor.system.stats.wounds.max,\n  strain: actor.system.stats.strain.value,\n  maxStrain: actor.system.stats.strain.max,\n})\n\nconst getWeaponModifiers = (weapon) => {\n  const pierce = weapon.system.itemmodifier.find((modifier) => modifier.name.toLowerCase().includes('pierce'))\n  const breach = weapon.system.itemmodifier.find((modifier) => modifier.name.toLowerCase().includes('breach'))\n  const stun = weapon.system.itemmodifier.find((modifier) => modifier.name.toLowerCase().includes('stun damage'))\n\n  return {\n    pierce: pierce ? pierce.system.rank : 0,\n    breach: breach ? breach.system.rank * 10 : 0,\n    strainDamage: !!stun,\n  }\n}\n\nconst calculateDamage = async () => {\n  const { actor } = getAttacker()\n\n  if (!actor) {\n    ui.notifications.error('No token found.')\n    return\n  }\n\n  const lastAttackMessage = getLastAttackFromChat(actor)\n\n  const attackerName = lastAttackMessage.speaker.alias\n\n  const success = lastAttackMessage.rolls[0].ffg.success\n\n  if (!success) {\n    await ChatMessage.create({\n      user: game.user._id,\n      speaker: ChatMessage.getSpeaker(),\n      content: `${attackerName} misses ${target.name}.`,\n    })\n    return\n  }\n\n  const targets = lastAttackMessage.user.targets\n\n  if (!targets.size) {\n    ui.notifications.info('No tokens targeted.')\n    return\n  }\n\n  const target = await canvas.tokens.get(targets.ids[0])\n\n  const targetStats = getActorStats(target.actor)\n\n  const weapon = lastAttackMessage.rolls[0].data\n  const weaponModifiers = getWeaponModifiers(weapon)\n\n  const soakAfterModifiers = targetStats.soak - (weaponModifiers.pierce + weaponModifiers.breach)\n  const remainingSoak = soakAfterModifiers < 0 ? 0 : soakAfterModifiers\n\n  const baseDamage = weapon.system.damage.adjusted || weapon.system.damage.value\n  const extraDamage = success\n  const totalDamage = baseDamage + extraDamage\n  const damageAfterSoak = totalDamage - remainingSoak\n\n  const damageType = weaponModifiers.strainDamage ? 'strain' : 'wounds'\n  const currentStat = damageType === 'strain' ? targetStats.strain : targetStats.wounds\n  const maxStat = damageType === 'strain' ? targetStats.maxStrain : targetStats.maxWounds\n\n  if (damageAfterSoak > 0) {\n    await target.actor.update({ [`system.stats.${damageType}.value`]: currentStat + damageAfterSoak })\n  }\n\n  let chatMessage = `${attackerName} hits ${target.name} with ${weapon.name} for ${totalDamage} ${damageType === 'strain' ? 'strain' : ''} damage.`\n\n  if (currentStat + damageAfterSoak > maxStat) {\n    chatMessage += ` ${target.name} is incapacitated.`\n  }\n\n  await ChatMessage.create({\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: chatMessage,\n  })\n}\n\ncalculateDamage()",
    "folder": null,
    "flags": {
      "exportSource": {
        "world": "star-wars-test",
        "system": "starwarsffg",
        "coreVersion": "11.315",
        "systemVersion": "1.801"
      }
    },
    "_stats": {
      "systemId": "starwarsffg",
      "systemVersion": "1.801",
      "coreVersion": "11.315",
      "createdTime": 1746233543825,
      "modifiedTime": 1746233578515,
      "lastModifiedBy": "HYolFCF4LGB8KqnT"
    }
  }
]
